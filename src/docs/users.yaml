components:
  requestBodies:
    newUser:
      type: object
      properties:
        name:
          type: String
          desciption: user name
        age:
          type: Int
          description: user age
        email:
          type: String
          description: user e-mail
        country:
          type: String
          description: user country
      example:
        name: Jesus Cristo
        age: 2022
        email: jesus@mail.com
        country: Judea Province
  schemas:
    User:
      type: object
      properties:
        id:
          type: Int
          description: user id (unique)
        name:
          type: String
          description: user name
        age:
          type: Int
          description: user age
        email:
          type: String
          description: user e-mail
        country:
          type: String
          description: user country
      example:
        id: 1
        name: Jesus Cristo
        age: 2022
        email: jesus@mail.com
        country: Judea Province

paths:
  /api/users/:
    post:
      summary: create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/requestBodies/newUser'
      responses:
        200:
          description: Users added successfuly
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Fields name and email at least required
        500:
          description: Server error

    get:
      summary: Get all users
      tags:
        - Users
      responses:
        200:
          description: Got all users successfuly
          parameters:
            description: Tags to filter by
            required: false
          content:
            aplication/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /api/users/{id}:
    get:
      summary: Find user by ID
      tags:
        - Users
      description: Returns a single user
      parameters:
        - name: id
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'         
        400:
          description: Bad request
        404:
          description: user not found

    put:
      summary: Update user by ID
      tags:
        - Users
      description: Update a user
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/requestBodies/newUser'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'         
        400:
          description: update fields required
        404:
          description: user not found
        500:
          description: Server error

    delete:
      summary: Delete user by ID
      tags:
        - Users
      description: Update a user
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
            format: int64
      responses:
        200:
          description: user deleted success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'         
        400:
          description: id by params required
        404:
          description: user not found
        500:
          description: Server error


